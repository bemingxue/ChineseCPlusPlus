
namespace BE::进制集 {

   // 合法进制的最小范围。
   inline constexpr 类型进制 最小进制 = 2;
   // 合法进制的最大范围。
   inline constexpr 类型进制 最大进制 = 36;
   // 进制错误的表示。
   inline constexpr 类型进制 错误进制码 = 255;

   // 存储每个进制字符的表。
   inline constexpr 类型字符 进制字符表[]
   {
      C('0'), C('1'), C('2'), C('3'), C('4'), C('5'), C('6'), C('7'), C('8'), C('9'),
      C('A'), C('B'), C('C'), C('D'), C('E'), C('F'), C('G'), C('H'), C('I'), C('J'),
      C('K'), C('L'), C('M'), C('N'), C('O'), C('P'), C('Q'), C('R'), C('S'), C('T'),
      C('U'), C('V'), C('W'), C('X'), C('Y'), C('Z')
   };
   
   /**
    * \brief >>> 判断进制项是否在合法范围内。
    * 
    * \param 进制项： 要判断的进制。
    * \return 合法则返回真，否则返回假。
    */
   inline constexpr 类型逻辑 进制判断(类型进制 进制项) noexcept
   {
      return 进制项 >= 最小进制 && 进制项 <= 最大进制;
   }

   /**
    * \brief >>> 判断指定字符是否是指定进制的合法字符。
    * 
    * \param 进制项： 要判断的进制。
    * \param 字符项： 要判断的字符。
    * \return 合法则返回真，否则返回假。
    */
   inline constexpr 类型逻辑 字符判断(类型进制 进制项, 类型字符 字符项) noexcept
   {
      if (进制判断(进制项) == 假)
      {
         return false;
      }

      if (进制项 <= 10)
      {
         return 字符项 >= C('0') && 字符项 <= C('0') + 进制项 - 1;
      }
      
      return 字符集::是数字字符(字符项) || (字符集::转大写字母(字符项) - C('A') + 10 < 进制项 && 字符集::转大写字母(字符项) - C('A') + 10 > 0);
   }

   /**
    * \brief >>> 如果字符是指定进制的合法字符，则将这个字符转换为对应的整数值。
    * 
    * \param 进制项： 要判断的进制。
    * \param 字符项： 要获取的字符。
    * \return 转换的整数值。
    */
   inline constexpr 类型进制 获取进制值(类型进制 进制项, 类型字符 字符项) noexcept
   {
      if (进制判断(进制项) == 假 || 字符判断(进制项, 字符项) == 假)
      {
         return 错误进制码;
      }

      if (::BE::字符集::是数字字符(字符项))
      {
         return 字符项 - C('0');
      }

      return 字符集::转大写字母(字符项) - C('A') + 10;
   }

   /**
    * \brief >>> 获取指定数字转换为指定进制值所需要的长度，不包括负号。
    * 
    * \param 进制项： 要判断的进制。
    * \param 数值项： 要获取长度的数字。
    * \return 所需长度。
    */
   template<泛整数类型 TmpT>
   inline constexpr 类型长度 获取进制长度(类型进制 进制项, TmpT 数值项) noexcept
   {
      if (进制判断(进制项) == 假)
      {
         return 0;
      }

      // 如果为 0 则返回 1。
      if (数值项 == TmpT{ })
      {
         return 1;
      }

      for (类型长度 长度量 = 1; ; ++长度量)
      {
         数值项 /= 进制项;

         if (数值项 == TmpT{ })
         {
            return 长度量;
         }
      }
   }

   /**
    * \brief >>> 判断进制是否具有前缀信息。
    * 
    * \param 进制项： 要判断的进制。
    * \return 具有前缀则返回真，否则返回假。
    */
   inline constexpr 类型逻辑 具有前缀判断(类型进制 进制项) noexcept
   {
      return 进制项 == 2 || 进制项 == 8 || 进制项 == 16;
   }

   /**
    * \brief >>> 判断指定字符串的开始是否是指定进制的前缀，不区分大小写。
    * 
    * \param 进制项： 要判断的进制。
    * \param 指针项： 要判断的字符串指针。
    * \param 长度项： 要判断的字符串长度。
    * \return 如果是则返回真，否则返回假。
    */
   inline constexpr 类型逻辑 进制前缀判断(类型进制 进制项, const 类型字符 *指针项, 类型长度 长度项)
   {
      if (进制判断(进制项) == 假 || 指针项 == 空指针)
      {
         return false;
      }

      switch (进制项)
      {
         case 2: 
            return 长度项 >= 2 && 指针项[0] == C('0') && 字符集::转大写字母(指针项[1]) == C('B');
         case 8:
            return 长度项 >= 1 && 指针项[0] == C('0');
         case 16:
            return 长度项 >= 2 && 指针项[0] == C('0') && 字符集::转大写字母(指针项[1]) == C('X');
         
         // 对于没有前缀的进制，始终认为其前缀为空字符串，因此返回真。
         default:
            return true;
      }
   }

   /**
    * \brief >>> 获取指定进制的前缀字符串，区分大小写。
    * 
    * \param 进制项： 要判断的进制。
    * \param 大写项： 如果有的话，是否返回大写形式的。
    * \return 如果具有前缀，则返回前缀字符串，否则返回空字符串。
    */
   inline constexpr const 类型字符 *获取进制前缀(类型进制 进制项, 类型逻辑 大写项 = 真) noexcept
   {
      switch (进制项)
      {
         case 2:
            return 大写项 ? C("0B") : C("0b");
         case 8:
            return C("0");
         case 16:
            return 大写项 ? C("0X") : C("0x");

         // 对于没有前缀的进制，始终返回空字符串。
         default:
            return C("");
      }
   }

}
