
namespace BE {

   /**
    * \brief >>> 将值迭代范围中的元素插入到插入开始项所在的迭代范围中，函数判断插入开始项是否在末尾，如果不在则使用移动语义将插入开始项后面的值移动到总结束项之前的元素中。
    * \brief >>> 请保证插入开始项、保有结束项、总结束项都在一片连续存储的内存块中。
    * 
    * \param 值开始项： 要插入的值的迭代范围开始。
    * \param 值结束项： 要插入的值的迭代范围结束。
    * \param 插入开始项： 要插入的位置。
    * \param 保有结束项： 原迭代范围的末尾，如果不于插入开始项相同，则函数会将 [插入开始项，保有结束项] 之间的元素后移。
    * \param 总结束项： 负责接受移动元素的位置，函数会从该位置的前一个元素开始自减迭代，其所在位置应当尽量和保有结束项相差值迭代范围元素的数量。
    * \return 
    * \tparam InputT： 至少满足单向迭代器需求的可读迭代器类型。
    * \tparam OutputT： 至少满足双向迭代器需求的可写迭代器，其解引用元素要能与 InputT 解引用元素赋值并能移动赋值。
    */
   template<单向迭代类型 InputT, typename IDRT = 模板解引类型<InputT>, 
            可写迭代类型<迭代枚举::双向, IDRT, T::SCur &&> OutputT, typename ODRT = 模板解引类型<OutputT>>
   inline constexpr 类型空的 迭代插入(InputT 值开始项, InputT 值结束项, OutputT 插入开始项, OutputT 保有结束项, OutputT 总结束项)
   noexcept(noexcept(安全移动赋值类型<ODRT> && 安全赋值类型<ODRT, IDRT>))
   {
      if (插入开始项 != 保有结束项)
      {
         ::BE::右迁移(插入开始项, 保有结束项, --总结束项);
      }

      ::BE::复制(插入开始项, 值开始项, 值结束项);
   }

   /**
    * \brief >>> 将指定值填充插入迭代范围中的所有元素，函数判断插入开始项是否在末尾，如果不在则使用移动语义将插入开始项后面的值移动到总结束项之前的元素中。
    * \brief >>> 请保证插入开始项、插入结束项、保有结束项、总结束项都在一片连续存储的内存块中。
    * 
    * \param 赋值项： 要插入的值。
    * \param 插入开始项： 要插入的迭代范围开始。
    * \param 插入结束项： 要插入的迭代范围结束。
    * \param 保有结束项： 原迭代范围的末尾，如果不于插入开始项相同，则函数会将 [插入开始项，保有结束项] 之间的元素后移。
    * \param 总结束项： 负责接受移动元素的位置，函数会从该位置的前一个元素开始自减迭代，其所在位置应当尽量和保有结束项相差值迭代范围元素的数量。
    * \return 
    * \tparam TmpT： 能够赋值给 OutputT 解引用元素的类型。
    * \tparam OutputT： 至少满足双向迭代器需求的可写迭代器，其解引用元素要能与 STmpT 赋值并能移动赋值。
    */
   template<typename TmpT, 可写迭代类型<迭代枚举::双向, TmpT, T::SCur &&> OutputT, typename ODRT = 模板解引类型<OutputT>>
   inline constexpr 类型空的 填充插入(TmpT 赋值项, OutputT 插入开始项, OutputT 插入结束项, OutputT 保有结束项, OutputT 总结束项)
   noexcept(noexcept(安全移动赋值类型<ODRT> && 安全赋值类型<ODRT, TmpT>))
   {
      if (插入开始项 != 保有结束项)
      {
         ::BE::右迁移(插入开始项, 保有结束项, --总结束项);
      }

      ::BE::值填充(插入开始项, 插入结束项, 赋值项);
   }

}
