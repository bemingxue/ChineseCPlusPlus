
namespace BE {

   /**
    * \brief >>> 提供一种方便的预设数字转字符串样式的类型，其存储一个样式表与字符串，提供一个调用运算符，其接受任意严格的数字类型，并传递预设的样式将其转换为字符串并存储和返回。
    */
   struct 数字字符串类
   {
      struct 样式表类
      {
         转换枚举 额外设定值 { };
         类型进制 进制值 = 10;
         类型字符 正号值 = C('\0');
         类型长度 精度值 = 默认精度;
      };
      
      // 存储转换数字所需的样式。
      样式表类 样式值;

      // 设定数字转为字符串时的样式。
      数字字符串类(类型进制 进制项 = 10, 类型长度 精度项 = 默认精度, 类型字符 正号项 = C('\0'), 转换枚举 额外设定项 = 转换枚举{}) noexcept
      {
         this->赋值(进制项, 精度项, 正号项, 额外设定项);
      }

      // 赋值目标的样式表。
      数字字符串类(const 数字字符串类 &赋值项) noexcept
      {
         this->赋值(赋值项);
      }

      /**
       * \brief >>> 设定转换时的样式。
       * 
       * \param 进制项： 进制，默认为十进制。
       * \param 精度项： 精度，即小数位数，可以为很大的值，函数会在特定位置自动停止。
       * \param 正号项： 在数字为整数时显示的正号，为结束符则不显示。
       * \param 额外设定项： 额外要设定的值，详细见 `数字转换枚举`。
       * \return this &
       */
      数字字符串类 &赋值(类型进制 进制项 = 10, 类型长度 精度项 = 默认精度, 类型字符 正号项 = C('\0'), 转换枚举 额外设定项 = 转换枚举{}) noexcept
      {
         样式值.进制值 = 进制项;
         样式值.精度值 = 精度项;
         样式值.正号值 = 正号项;
         样式值.额外设定值 = 额外设定项;
         
         return *this;
      }

      /**
       * \brief >>> 赋值目标的样式表。
       * 
       * \param 赋值项： 要赋值的样式表。
       * \return this &
       */
      数字字符串类 &赋值(const 数字字符串类 &赋值项) noexcept
      {
         this->样式值.进制值 = 赋值项.样式值.进制值;
         this->样式值.精度值 = 赋值项.样式值.精度值;
         this->样式值.正号值 = 赋值项.样式值.正号值;
         this->样式值.额外设定值 = 赋值项.样式值.额外设定值;

         return *this;
      }

      /**
       * \brief >>> 获取存储的字符串值。
       * 
       * \return 存储的只读字符串类引用。
       */
      const 字符串类 &获取字符串() const noexcept
      {
         return this->类中字符串;
      }

      /**
       * \brief >>> 获取类中存储的字符串的错误信息。
       * 
       * \return 错误信息。
       */
      类型错误 获取错误() const noexcept
      {
         return this->类中字符串.获取错误();
      }

      protected:

      字符串类 类中字符串 { };

      public:

      // 赋值目标的样式表。
      数字字符串类 &operator = (const 数字字符串类 &赋值项) noexcept
      {
         return this->赋值(赋值项);
      }

      // 允许直接使用 |= 设置额外设定项。
      数字字符串类 &operator |= (转换枚举 额外设定项) noexcept
      {
         this->样式值.额外设定值 = this->样式值.额外设定值 | 额外设定项;
         return *this;
      }

      // 使用给定的转换设定参数将指定数字转换为字符串并赋值，然后将其返回。
      template<严格数字类型 TmpT>
      const 字符串类 &operator () (TmpT 转换项) noexcept
      {
         if constexpr (浮点类型<TmpT>)
         {
            this->类中字符串.赋值(转换项, 样式值.精度值, 样式值.进制值, 样式值.正号值, 样式值.额外设定值);
         }
         else
         {
            this->类中字符串.赋值(转换项, 样式值.进制值, 样式值.正号值, 样式值.额外设定值);
         }

         return this->类中字符串;
      }

      // 转换为字符串，但返回副本而非引用。
      template<严格数字类型 TmpT>
      字符串类 operator [] (TmpT 转换项) noexcept
      {
         return this->operator()(转换项).获取副本();
      }

      // 获取存储的字符串类只读引用。
      operator const 字符串类 &() const noexcept
      {
         return this->获取字符串();
      }

      // 如果存储的字符串没有产生错误（如转换时产生进制错误等）则返回真，否则返回假。
      explicit operator 类型逻辑 () const noexcept
      {
         return this->类中字符串.无错误的();
      }
   };

}
